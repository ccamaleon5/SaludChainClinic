// Code generated by go-swagger; DO NOT EDIT.

package insurance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// CreateDoctorCredentialHandlerFunc turns a function with the right signature into a create doctor credential handler
type CreateDoctorCredentialHandlerFunc func(CreateDoctorCredentialParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateDoctorCredentialHandlerFunc) Handle(params CreateDoctorCredentialParams) middleware.Responder {
	return fn(params)
}

// CreateDoctorCredentialHandler interface for that can handle valid create doctor credential params
type CreateDoctorCredentialHandler interface {
	Handle(CreateDoctorCredentialParams) middleware.Responder
}

// NewCreateDoctorCredential creates a new http.Handler for the create doctor credential operation
func NewCreateDoctorCredential(ctx *middleware.Context, handler CreateDoctorCredentialHandler) *CreateDoctorCredential {
	return &CreateDoctorCredential{Context: ctx, Handler: handler}
}

/*CreateDoctorCredential swagger:route POST /insurance/credential/doctor insurance createDoctorCredential

Create Health Insurance Doctor Credential

This service is responsible for generating health insurance doctor credential, storing the credential hash in the blockchain. You send the credential data with type of credential, range of valid dates and evidence generated about credential as optional

*/
type CreateDoctorCredential struct {
	Context *middleware.Context
	Handler CreateDoctorCredentialHandler
}

func (o *CreateDoctorCredential) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateDoctorCredentialParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
