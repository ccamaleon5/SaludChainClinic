// Code generated by go-swagger; DO NOT EDIT.

package insurance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// VerifyHealthCredentialHandlerFunc turns a function with the right signature into a verify health credential handler
type VerifyHealthCredentialHandlerFunc func(VerifyHealthCredentialParams) middleware.Responder

// Handle executing the request and returning a response
func (fn VerifyHealthCredentialHandlerFunc) Handle(params VerifyHealthCredentialParams) middleware.Responder {
	return fn(params)
}

// VerifyHealthCredentialHandler interface for that can handle valid verify health credential params
type VerifyHealthCredentialHandler interface {
	Handle(VerifyHealthCredentialParams) middleware.Responder
}

// NewVerifyHealthCredential creates a new http.Handler for the verify health credential operation
func NewVerifyHealthCredential(ctx *middleware.Context, handler VerifyHealthCredentialHandler) *VerifyHealthCredential {
	return &VerifyHealthCredential{Context: ctx, Handler: handler}
}

/*VerifyHealthCredential swagger:route GET /insurance/credential/{hashCredential}/verify insurance verifyHealthCredential

Verify a health credential

This service verify into blockchain if the health credentials are current and these were not revoked

*/
type VerifyHealthCredential struct {
	Context *middleware.Context
	Handler VerifyHealthCredentialHandler
}

func (o *VerifyHealthCredential) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewVerifyHealthCredentialParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
