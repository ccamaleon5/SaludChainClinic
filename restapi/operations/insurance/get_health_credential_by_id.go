// Code generated by go-swagger; DO NOT EDIT.

package insurance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetHealthCredentialByIDHandlerFunc turns a function with the right signature into a get health credential by Id handler
type GetHealthCredentialByIDHandlerFunc func(GetHealthCredentialByIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetHealthCredentialByIDHandlerFunc) Handle(params GetHealthCredentialByIDParams) middleware.Responder {
	return fn(params)
}

// GetHealthCredentialByIDHandler interface for that can handle valid get health credential by Id params
type GetHealthCredentialByIDHandler interface {
	Handle(GetHealthCredentialByIDParams) middleware.Responder
}

// NewGetHealthCredentialByID creates a new http.Handler for the get health credential by Id operation
func NewGetHealthCredentialByID(ctx *middleware.Context, handler GetHealthCredentialByIDHandler) *GetHealthCredentialByID {
	return &GetHealthCredentialByID{Context: ctx, Handler: handler}
}

/*GetHealthCredentialByID swagger:route GET /insurance/credential/{publicKey} insurance getHealthCredentialById

Get a Credential by Digital Identity

This service returns a health credential verifiable

*/
type GetHealthCredentialByID struct {
	Context *middleware.Context
	Handler GetHealthCredentialByIDHandler
}

func (o *GetHealthCredentialByID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetHealthCredentialByIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
