// Code generated by go-swagger; DO NOT EDIT.

package insurance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// CreateHealthCredentialHandlerFunc turns a function with the right signature into a create health credential handler
type CreateHealthCredentialHandlerFunc func(CreateHealthCredentialParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateHealthCredentialHandlerFunc) Handle(params CreateHealthCredentialParams) middleware.Responder {
	return fn(params)
}

// CreateHealthCredentialHandler interface for that can handle valid create health credential params
type CreateHealthCredentialHandler interface {
	Handle(CreateHealthCredentialParams) middleware.Responder
}

// NewCreateHealthCredential creates a new http.Handler for the create health credential operation
func NewCreateHealthCredential(ctx *middleware.Context, handler CreateHealthCredentialHandler) *CreateHealthCredential {
	return &CreateHealthCredential{Context: ctx, Handler: handler}
}

/*CreateHealthCredential swagger:route POST /insurance/credential/ insurance createHealthCredential

Create Health Insurance Credential

This service is responsible for generating health insurance credential, storing the credential hash in the blockchain. You send the credential data with type of credential, range of valid dates and evidence generated about credential as optional

*/
type CreateHealthCredential struct {
	Context *middleware.Context
	Handler CreateHealthCredentialHandler
}

func (o *CreateHealthCredential) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateHealthCredentialParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
