// Code generated by go-swagger; DO NOT EDIT.

package health

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// ShareMedicalRecordHandlerFunc turns a function with the right signature into a share medical record handler
type ShareMedicalRecordHandlerFunc func(ShareMedicalRecordParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ShareMedicalRecordHandlerFunc) Handle(params ShareMedicalRecordParams) middleware.Responder {
	return fn(params)
}

// ShareMedicalRecordHandler interface for that can handle valid share medical record params
type ShareMedicalRecordHandler interface {
	Handle(ShareMedicalRecordParams) middleware.Responder
}

// NewShareMedicalRecord creates a new http.Handler for the share medical record operation
func NewShareMedicalRecord(ctx *middleware.Context, handler ShareMedicalRecordHandler) *ShareMedicalRecord {
	return &ShareMedicalRecord{Context: ctx, Handler: handler}
}

/*ShareMedicalRecord swagger:route POST /health/patient/medicalrecord/share health shareMedicalRecord

Share Patient's medical record

This service is responsible to share medical record with other entity o member that exist in SaludChain ecosystem

*/
type ShareMedicalRecord struct {
	Context *middleware.Context
	Handler ShareMedicalRecordHandler
}

func (o *ShareMedicalRecord) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewShareMedicalRecordParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
