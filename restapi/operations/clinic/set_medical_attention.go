// Code generated by go-swagger; DO NOT EDIT.

package clinic

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// SetMedicalAttentionHandlerFunc turns a function with the right signature into a set medical attention handler
type SetMedicalAttentionHandlerFunc func(SetMedicalAttentionParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SetMedicalAttentionHandlerFunc) Handle(params SetMedicalAttentionParams) middleware.Responder {
	return fn(params)
}

// SetMedicalAttentionHandler interface for that can handle valid set medical attention params
type SetMedicalAttentionHandler interface {
	Handle(SetMedicalAttentionParams) middleware.Responder
}

// NewSetMedicalAttention creates a new http.Handler for the set medical attention operation
func NewSetMedicalAttention(ctx *middleware.Context, handler SetMedicalAttentionHandler) *SetMedicalAttention {
	return &SetMedicalAttention{Context: ctx, Handler: handler}
}

/*SetMedicalAttention swagger:route PUT /clinic/medicalappointment clinic setMedicalAttention

Update Medical Appointment

This service is responsible for book a medical appointment, that through multi signature contract, how proof blockchain generates a credential about this contract to share information with clinic

*/
type SetMedicalAttention struct {
	Context *middleware.Context
	Handler SetMedicalAttentionHandler
}

func (o *SetMedicalAttention) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewSetMedicalAttentionParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
